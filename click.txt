<!DOCTYPE html>
<html>
<head>
	<title>Document</title>
	<script src="https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"></script>
	<link rel="stylesheet" type="text/css" href="vue.css">
</head>
<body>

	<!--  vue指令 -->
	<!-- 1.v-bind 绑定属性 (v-bind <==>)-->
	<!-- methods下写函数 -->
	<!-- class [] {} -->
	<!-- style {} [] -->
	<!-- 2.v-on:xxx -- (v-on <==>@ )> 
	<!-- v-if 能控制元素的显示与隐藏  -->
	<!-- v-else -->
	<!-- v-else-if -->
	<!-- v-show 能控制元素的显示与隐藏 -->

	<!-- 区别 -->
	<!-- 1.v-if控制的dom的移除/添加，v-show控制dom的样式显示与隐藏display -->
	<!-- 频繁的切换显示/隐藏要使用v-show -->
	<!-- 只判断一次时，使用v-if -->
	<!--2.v-if可以卸载template上，v-show不行，写了也没用 -->
	<!-- 1.不能通过索引的方式去更改数组，这样不会渲染 -->
	<!-- 2.不能通过更改长度的方式去更改数组，这样不会渲染 -->
	<!-- 3.数组变异方法：pop、shift、unshift、sort、reverse、push -->

	<!-- 1.向对象内添加或删除属性，不会渲染页面 -->
	<!-- v-model 实现数据的双向绑定：value+@input 的语法糖 -->
	<!-- input txet 输出文本 -->
	<!-- textarea  内容文本 -->
	<!-- input checkbox  输出选项 -->
	<!-- input radio  单选 -->
	<!-- select  下拉选项 -->
	<!-- multiple  让下拉多选 -->
	<!-- watch  侦听器 -->
	<!-- computed  计算属性 -->

<div id="app">
	<square-change></square-change>
</div>
<script>
	const vm = new Vue({
		el:'#app',
		data:{

		},
		components:{
			squareChange:{
				data(){
					return{
						colorArr:['red','orange','yellow','green']
					}
				},
				template:`
				<div>
				<button 
					v-for = "color in colorArr" 
					:key = "color"
					:style ="{backgroundColor:color}"
					@click = "handleClick(color)"
					:data-color = "color"
					>{{color}}
					</button>
					<div class = "square-box" ref = "squareBox"></div>
				</div>
				 `,
				methods:{
					handleClick(color){
						const squareBox = this.$refs.squareBox;
						squareBox.style.backgroundColor = color;
						// console.log(color);
						console.log(this.$refs);

					}
				}
			}
		}
	})
</script>
</body>
</html>